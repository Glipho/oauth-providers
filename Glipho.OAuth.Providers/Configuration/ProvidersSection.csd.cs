//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18033
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Glipho.OAuth.Providers.Configuration
{
    
    
    /// <summary>
    /// The ServiceProvider Configuration Section.
    /// </summary>
    public partial class ServiceProvider : global::System.Configuration.ConfigurationSection
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region TokenProvider Property
        /// <summary>
        /// The XML name of the <see cref="TokenProvider"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string TokenProviderPropertyName = "tokenProvider";
        
        /// <summary>
        /// Gets or sets the TokenProvider.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The TokenProvider.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Glipho.OAuth.Providers.Configuration.ServiceProvider.TokenProviderPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false, DefaultValue=false)]
        public virtual bool TokenProvider
        {
            get
            {
                return ((bool)(base[global::Glipho.OAuth.Providers.Configuration.ServiceProvider.TokenProviderPropertyName]));
            }
            set
            {
                base[global::Glipho.OAuth.Providers.Configuration.ServiceProvider.TokenProviderPropertyName] = value;
            }
        }
        #endregion
        
        #region Endpoints Property
        /// <summary>
        /// The XML name of the <see cref="Endpoints"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string EndpointsPropertyName = "endpoints";
        
        /// <summary>
        /// Gets or sets the Endpoints.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Endpoints.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Glipho.OAuth.Providers.Configuration.ServiceProvider.EndpointsPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual global::Glipho.OAuth.Providers.Configuration.Endpoints Endpoints
        {
            get
            {
                return ((global::Glipho.OAuth.Providers.Configuration.Endpoints)(base[global::Glipho.OAuth.Providers.Configuration.ServiceProvider.EndpointsPropertyName]));
            }
            set
            {
                base[global::Glipho.OAuth.Providers.Configuration.ServiceProvider.EndpointsPropertyName] = value;
            }
        }
        #endregion
        
        #region Nonces Property
        /// <summary>
        /// The XML name of the <see cref="Nonces"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string NoncesPropertyName = "nonces";
        
        /// <summary>
        /// Gets or sets the Nonces.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Nonces.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Glipho.OAuth.Providers.Configuration.ServiceProvider.NoncesPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual global::Glipho.OAuth.Providers.Configuration.Nonces Nonces
        {
            get
            {
                return ((global::Glipho.OAuth.Providers.Configuration.Nonces)(base[global::Glipho.OAuth.Providers.Configuration.ServiceProvider.NoncesPropertyName]));
            }
            set
            {
                base[global::Glipho.OAuth.Providers.Configuration.ServiceProvider.NoncesPropertyName] = value;
            }
        }
        #endregion
        
        #region RoleProvider Property
        /// <summary>
        /// The XML name of the <see cref="RoleProvider"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string RoleProviderPropertyName = "roleProvider";
        
        /// <summary>
        /// Gets or sets the RoleProvider.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The RoleProvider.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Glipho.OAuth.Providers.Configuration.ServiceProvider.RoleProviderPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::Glipho.OAuth.Providers.Configuration.RoleProvider RoleProvider
        {
            get
            {
                return ((global::Glipho.OAuth.Providers.Configuration.RoleProvider)(base[global::Glipho.OAuth.Providers.Configuration.ServiceProvider.RoleProviderPropertyName]));
            }
            set
            {
                base[global::Glipho.OAuth.Providers.Configuration.ServiceProvider.RoleProviderPropertyName] = value;
            }
        }
        #endregion
        
        #region ExemptUrls Property
        /// <summary>
        /// The XML name of the <see cref="ExemptUrls"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string ExemptUrlsPropertyName = "exemptUrls";
        
        /// <summary>
        /// Gets or sets the ExemptUrls.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The ExemptUrls.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Glipho.OAuth.Providers.Configuration.ServiceProvider.ExemptUrlsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::Glipho.OAuth.Providers.Configuration.ExemptUrls ExemptUrls
        {
            get
            {
                return ((global::Glipho.OAuth.Providers.Configuration.ExemptUrls)(base[global::Glipho.OAuth.Providers.Configuration.ServiceProvider.ExemptUrlsPropertyName]));
            }
            set
            {
                base[global::Glipho.OAuth.Providers.Configuration.ServiceProvider.ExemptUrlsPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace Glipho.OAuth.Providers.Configuration
{
    
    
    /// <summary>
    /// The Endpoint Configuration Element.
    /// </summary>
    public partial class Endpoint : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Url Property
        /// <summary>
        /// The XML name of the <see cref="Url"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string UrlPropertyName = "url";
        
        /// <summary>
        /// Gets or sets the Url.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Url.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Glipho.OAuth.Providers.Configuration.Endpoint.UrlPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual string Url
        {
            get
            {
                return ((string)(base[global::Glipho.OAuth.Providers.Configuration.Endpoint.UrlPropertyName]));
            }
            set
            {
                base[global::Glipho.OAuth.Providers.Configuration.Endpoint.UrlPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace Glipho.OAuth.Providers.Configuration
{
    
    
    /// <summary>
    /// The Endpoints Configuration Element.
    /// </summary>
    public partial class Endpoints : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region AccessToken Property
        /// <summary>
        /// The XML name of the <see cref="AccessToken"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string AccessTokenPropertyName = "accessToken";
        
        /// <summary>
        /// Gets or sets the AccessToken.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The AccessToken.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Glipho.OAuth.Providers.Configuration.Endpoints.AccessTokenPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual global::Glipho.OAuth.Providers.Configuration.Endpoint AccessToken
        {
            get
            {
                return ((global::Glipho.OAuth.Providers.Configuration.Endpoint)(base[global::Glipho.OAuth.Providers.Configuration.Endpoints.AccessTokenPropertyName]));
            }
            set
            {
                base[global::Glipho.OAuth.Providers.Configuration.Endpoints.AccessTokenPropertyName] = value;
            }
        }
        #endregion
        
        #region RequestToken Property
        /// <summary>
        /// The XML name of the <see cref="RequestToken"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string RequestTokenPropertyName = "requestToken";
        
        /// <summary>
        /// Gets or sets the RequestToken.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The RequestToken.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Glipho.OAuth.Providers.Configuration.Endpoints.RequestTokenPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual global::Glipho.OAuth.Providers.Configuration.Endpoint RequestToken
        {
            get
            {
                return ((global::Glipho.OAuth.Providers.Configuration.Endpoint)(base[global::Glipho.OAuth.Providers.Configuration.Endpoints.RequestTokenPropertyName]));
            }
            set
            {
                base[global::Glipho.OAuth.Providers.Configuration.Endpoints.RequestTokenPropertyName] = value;
            }
        }
        #endregion
        
        #region UserAuthorisation Property
        /// <summary>
        /// The XML name of the <see cref="UserAuthorisation"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string UserAuthorisationPropertyName = "userAuthorisation";
        
        /// <summary>
        /// Gets or sets the UserAuthorisation.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The UserAuthorisation.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Glipho.OAuth.Providers.Configuration.Endpoints.UserAuthorisationPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual global::Glipho.OAuth.Providers.Configuration.Endpoint UserAuthorisation
        {
            get
            {
                return ((global::Glipho.OAuth.Providers.Configuration.Endpoint)(base[global::Glipho.OAuth.Providers.Configuration.Endpoints.UserAuthorisationPropertyName]));
            }
            set
            {
                base[global::Glipho.OAuth.Providers.Configuration.Endpoints.UserAuthorisationPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace Glipho.OAuth.Providers.Configuration
{
    
    
    /// <summary>
    /// The Nonces Configuration Element.
    /// </summary>
    public partial class Nonces : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region ClearingInterval Property
        /// <summary>
        /// The XML name of the <see cref="ClearingInterval"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string ClearingIntervalPropertyName = "clearingInterval";
        
        /// <summary>
        /// Gets or sets the ClearingInterval.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The ClearingInterval.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Glipho.OAuth.Providers.Configuration.Nonces.ClearingIntervalPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false, DefaultValue="00:10:00")]
        public virtual global::System.TimeSpan ClearingInterval
        {
            get
            {
                return ((global::System.TimeSpan)(base[global::Glipho.OAuth.Providers.Configuration.Nonces.ClearingIntervalPropertyName]));
            }
            set
            {
                base[global::Glipho.OAuth.Providers.Configuration.Nonces.ClearingIntervalPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace Glipho.OAuth.Providers.Configuration
{
    
    
    /// <summary>
    /// The RoleProvider Configuration Element.
    /// </summary>
    public partial class RoleProvider : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region EnableCustomRoleProvider Property
        /// <summary>
        /// The XML name of the <see cref="EnableCustomRoleProvider"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string EnableCustomRoleProviderPropertyName = "enableCustomRoleProvider";
        
        /// <summary>
        /// Gets the EnableCustomRoleProvider.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The EnableCustomRoleProvider.")]
        [global::System.ComponentModel.ReadOnlyAttribute(true)]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Glipho.OAuth.Providers.Configuration.RoleProvider.EnableCustomRoleProviderPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false, DefaultValue=false)]
        public virtual bool EnableCustomRoleProvider
        {
            get
            {
                return ((bool)(base[global::Glipho.OAuth.Providers.Configuration.RoleProvider.EnableCustomRoleProviderPropertyName]));
            }
        }
        #endregion
    }
}
namespace Glipho.OAuth.Providers.Configuration
{
    
    
    /// <summary>
    /// A collection of ExemptUrl instances.
    /// </summary>
    [global::System.Configuration.ConfigurationCollectionAttribute(typeof(global::Glipho.OAuth.Providers.Configuration.ExemptUrl), CollectionType=global::System.Configuration.ConfigurationElementCollectionType.AddRemoveClearMap, AddItemName="add", RemoveItemName="remove", ClearItemsName="clear")]
    public partial class ExemptUrls : global::System.Configuration.ConfigurationElementCollection
    {
        
        #region Constants
        /// <summary>
        /// The XML name of the individual <see cref="global::Glipho.OAuth.Providers.Configuration.ExemptUrl"/> instances in this collection.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string ExemptUrlPropertyName = "exemptUrl";
        #endregion
        
        #region Overrides
        /// <summary>
        /// Gets the type of the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <returns>The <see cref="global::System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override global::System.Configuration.ConfigurationElementCollectionType CollectionType
        {
            get
            {
                return global::System.Configuration.ConfigurationElementCollectionType.AddRemoveClearMap;
            }
        }
        
        /// <summary>
        /// Gets the name used to identify this collection of elements
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override string ElementName
        {
            get
            {
                return global::Glipho.OAuth.Providers.Configuration.ExemptUrls.ExemptUrlPropertyName;
            }
        }
        
        /// <summary>
        /// Indicates whether the specified <see cref="global::System.Configuration.ConfigurationElement"/> exists in the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="elementName">The name of the element to verify.</param>
        /// <returns>
        /// <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override bool IsElementName(string elementName)
        {
            return (elementName == global::Glipho.OAuth.Providers.Configuration.ExemptUrls.ExemptUrlPropertyName);
        }
        
        /// <summary>
        /// Gets the element key for the specified configuration element.
        /// </summary>
        /// <param name="element">The <see cref="global::System.Configuration.ConfigurationElement"/> to return the key for.</param>
        /// <returns>
        /// An <see cref="object"/> that acts as the key for the specified <see cref="global::System.Configuration.ConfigurationElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override object GetElementKey(global::System.Configuration.ConfigurationElement element)
        {
            return ((global::Glipho.OAuth.Providers.Configuration.ExemptUrl)(element)).Url;
        }
        
        /// <summary>
        /// Creates a new <see cref="global::Glipho.OAuth.Providers.Configuration.ExemptUrl"/>.
        /// </summary>
        /// <returns>
        /// A new <see cref="global::Glipho.OAuth.Providers.Configuration.ExemptUrl"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override global::System.Configuration.ConfigurationElement CreateNewElement()
        {
            return new global::Glipho.OAuth.Providers.Configuration.ExemptUrl();
        }
        #endregion
        
        #region Indexer
        /// <summary>
        /// Gets the <see cref="global::Glipho.OAuth.Providers.Configuration.ExemptUrl"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::Glipho.OAuth.Providers.Configuration.ExemptUrl"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::Glipho.OAuth.Providers.Configuration.ExemptUrl this[int index]
        {
            get
            {
                return ((global::Glipho.OAuth.Providers.Configuration.ExemptUrl)(base.BaseGet(index)));
            }
        }
        
        /// <summary>
        /// Gets the <see cref="global::Glipho.OAuth.Providers.Configuration.ExemptUrl"/> with the specified key.
        /// </summary>
        /// <param name="url">The key of the <see cref="global::Glipho.OAuth.Providers.Configuration.ExemptUrl"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::Glipho.OAuth.Providers.Configuration.ExemptUrl this[object url]
        {
            get
            {
                return ((global::Glipho.OAuth.Providers.Configuration.ExemptUrl)(base.BaseGet(url)));
            }
        }
        #endregion
        
        #region Add
        /// <summary>
        /// Adds the specified <see cref="global::Glipho.OAuth.Providers.Configuration.ExemptUrl"/> to the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="exemptUrl">The <see cref="global::Glipho.OAuth.Providers.Configuration.ExemptUrl"/> to add.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public void Add(global::Glipho.OAuth.Providers.Configuration.ExemptUrl exemptUrl)
        {
            base.BaseAdd(exemptUrl);
        }
        #endregion
        
        #region Remove
        /// <summary>
        /// Removes the specified <see cref="global::Glipho.OAuth.Providers.Configuration.ExemptUrl"/> from the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="exemptUrl">The <see cref="global::Glipho.OAuth.Providers.Configuration.ExemptUrl"/> to remove.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public void Remove(global::Glipho.OAuth.Providers.Configuration.ExemptUrl exemptUrl)
        {
            base.BaseRemove(this.GetElementKey(exemptUrl));
        }
        #endregion
        
        #region GetItem
        /// <summary>
        /// Gets the <see cref="global::Glipho.OAuth.Providers.Configuration.ExemptUrl"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::Glipho.OAuth.Providers.Configuration.ExemptUrl"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::Glipho.OAuth.Providers.Configuration.ExemptUrl GetItemAt(int index)
        {
            return ((global::Glipho.OAuth.Providers.Configuration.ExemptUrl)(base.BaseGet(index)));
        }
        
        /// <summary>
        /// Gets the <see cref="global::Glipho.OAuth.Providers.Configuration.ExemptUrl"/> with the specified key.
        /// </summary>
        /// <param name="url">The key of the <see cref="global::Glipho.OAuth.Providers.Configuration.ExemptUrl"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::Glipho.OAuth.Providers.Configuration.ExemptUrl GetItemByKey(string url)
        {
            return ((global::Glipho.OAuth.Providers.Configuration.ExemptUrl)(base.BaseGet(((object)(url)))));
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
    }
}
namespace Glipho.OAuth.Providers.Configuration
{
    
    
    /// <summary>
    /// The ExemptUrl Configuration Element.
    /// </summary>
    public partial class ExemptUrl : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Url Property
        /// <summary>
        /// The XML name of the <see cref="Url"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string UrlPropertyName = "url";
        
        /// <summary>
        /// Gets or sets the Url.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Url.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Glipho.OAuth.Providers.Configuration.ExemptUrl.UrlPropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false)]
        public virtual string Url
        {
            get
            {
                return ((string)(base[global::Glipho.OAuth.Providers.Configuration.ExemptUrl.UrlPropertyName]));
            }
            set
            {
                base[global::Glipho.OAuth.Providers.Configuration.ExemptUrl.UrlPropertyName] = value;
            }
        }
        #endregion
    }
}
